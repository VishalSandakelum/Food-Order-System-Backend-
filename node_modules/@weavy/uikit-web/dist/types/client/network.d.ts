import { WeavyContextBase } from './weavy';
import { ConnectionState, NetworkState, NetworkStatus, ServerState } from '../types/server.types';
import { Constructor } from '../types/generic.types';
export interface WeavyNetworkProps {
    networkState: NetworkState;
    serverState: ServerState;
    connectionState: ConnectionState;
    networkStateIsPending: boolean;
    readonly network: NetworkStatus;
    triggerNetworkChange: () => void;
    addNetworkListener: (callback: (state: NetworkStatus) => void) => void;
    removeNetworkListener: (callback: (state: NetworkStatus) => void) => void;
}
export declare const WeavyNetworkMixin: <TBase extends Constructor<WeavyContextBase>>(Base: TBase) => {
    new (...args: any[]): {
        _networkEvents: Set<(status: NetworkStatus) => void>;
        _connectionState: ConnectionState;
        _serverState: ServerState;
        _networkState: NetworkState;
        _networkStateIsPending: boolean;
        networkState: NetworkState;
        serverState: ServerState;
        connectionState: ConnectionState;
        networkStateIsPending: boolean;
        readonly network: NetworkStatus;
        triggerNetworkChange(): void;
        addNetworkListener(callback: (state: NetworkStatus) => void): void;
        removeNetworkListener(callback: (state: NetworkStatus) => void): void;
        readonly weavySid: string;
        readonly weavyId: string;
        readonly host: HTMLElement;
        "__#12@#hostContextProvider"?: import('../utils/context-provider').WyContextProvider<typeof import('../contexts/weavy-context').weavyContextDefinition>;
        cloudFilePickerUrl: string | URL | undefined;
        confluenceAuthenticationUrl: string | URL | undefined;
        confluenceProductName: string | undefined;
        disableEnvironmentImports: boolean | undefined;
        gcTime: number | undefined;
        reactions: string[] | undefined;
        scrollBehavior: "smooth" | "instant" | "auto" | undefined;
        staleTime: number | undefined;
        tokenFactoryRetryDelay: number | undefined;
        tokenFactoryTimeout: number | undefined;
        "__#12@#resolveUrl"?: (url: URL) => void;
        "__#12@#whenUrl": Promise<unknown>;
        whenUrl(): Promise<void>;
        "__#12@#url"?: URL;
        url: string | URL | undefined;
        "__#12@#zoomAuthenticationUrl"?: string | URL;
        zoomAuthenticationUrl: string | URL | undefined;
        "__#12@#isDestroyed": boolean;
        readonly isDestroyed: boolean;
        destroy(): void;
    };
} & TBase;
//# sourceMappingURL=network.d.ts.map