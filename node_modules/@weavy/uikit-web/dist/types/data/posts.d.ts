import { InfiniteQueryObserverOptions, MutationKey, InfiniteData } from '@tanstack/query-core';
import { WeavyContextType } from '../client/weavy';
import { MutatePostProps, PostType, PostsResultType } from '../types/posts.types';
export declare function getPostsOptions(weavyContext: WeavyContextType, appId: number | null): InfiniteQueryObserverOptions<PostsResultType, Error, InfiniteData<PostsResultType>>;
export declare function getUpdatePostMutationOptions(weavyContext: WeavyContextType, mutationKey: MutationKey): {
    mutationFn: (variables: MutatePostProps) => Promise<any>;
    mutationKey: MutationKey;
    onMutate: (variables: MutatePostProps) => Promise<void>;
    onSuccess: (data: PostType, variables: MutatePostProps) => void;
};
export type MutatePostContextType = {
    tempId: number;
};
export declare function getAddPostMutationOptions(weavyContext: WeavyContextType, mutationKey: MutationKey): {
    mutationFn: (variables: MutatePostProps) => Promise<any>;
    mutationKey: MutationKey;
    onMutate: (variables: MutatePostProps) => Promise<MutatePostContextType>;
    onSuccess: (data: PostType, variables: MutatePostProps, context?: MutatePostContextType) => void;
};
//# sourceMappingURL=posts.d.ts.map