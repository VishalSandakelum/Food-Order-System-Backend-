import { BlobType, FileMutationContextType, MutateFileProps } from '../types/files.types';
import { WeavyContextType } from '../client/weavy';
import { AppType } from '../types/app.types';
import { UserType } from '../types/users.types';
import { MutationKey } from '@tanstack/query-core';
export type UploadBlobProps = {
    file: File;
    onProgress?: (variables: UploadProgressProps) => void;
};
export type UploadProgressProps = {
    progress: number;
};
export declare function removeSuccessfulUploadBlobMutations(weavyContext: WeavyContextType, app: AppType, name: string, uniqueId?: string): void;
export declare function uploadBlob(weavyContext: WeavyContextType, file: File, onProgress?: (variables: UploadProgressProps) => void): Promise<BlobType>;
export declare function getSimpleUploadBlobMutationOptions(weavyContext: WeavyContextType): {
    mutationFn: (variables: MutateFileProps) => Promise<BlobType>;
};
export declare function getUploadBlobMutationOptions(weavyContext: WeavyContextType, user: UserType, app: AppType, uniqueId?: string): {
    mutationFn: (variables: MutateFileProps) => Promise<BlobType>;
    mutationKey: MutationKey;
    onMutate: (variables: MutateFileProps) => Promise<FileMutationContextType>;
    onSuccess: (_data: BlobType, variables: MutateFileProps, _context: FileMutationContextType | undefined) => void;
    onError(error: Error, variables: MutateFileProps, _context: FileMutationContextType | undefined): void;
};
//# sourceMappingURL=blob-upload.d.ts.map