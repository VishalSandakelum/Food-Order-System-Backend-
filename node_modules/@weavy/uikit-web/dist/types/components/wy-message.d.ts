import { LitElement, PropertyValues } from 'lit';
import { ReactableType } from '../types/reactions.types';
import { MemberType } from '../types/members.types';
import { MeetingType } from '../types/meetings.types';
import { FileType } from '../types/files.types';
import { EmbedType } from '../types/embeds.types';
import { PollOptionType } from '../types/polls.types';
import { ConversationType } from '../types/conversations.types';
import { ShadowPartsController } from '../controllers/shadow-parts-controller';
declare const WyMessage_base: import('../types/generic.types').Constructor<import('../mixins/block-mixin').BlockContextProviderProps & import('../mixins/block-mixin').BlockContextProps> & typeof LitElement;
export default class WyMessage extends WyMessage_base {
    static styles: import('lit').CSSResult;
    protected exportParts: ShadowPartsController;
    conversation?: ConversationType;
    messageId: number;
    me: boolean;
    isBot: boolean;
    isPrivateChat: boolean;
    temp: boolean;
    sent?: boolean | null;
    delivered?: boolean | null;
    displayName: string;
    avatar?: string;
    createdAt: string;
    html: string;
    text: string;
    attachments?: FileType[];
    meeting?: MeetingType;
    pollOptions: PollOptionType[] | undefined;
    embed?: EmbedType;
    reactions?: ReactableType[];
    seenBy: MemberType[];
    highlight: boolean;
    private previewRef;
    private highlightRef;
    private dispatchVote;
    protected willUpdate(changedProperties: PropertyValues<this>): void;
    render(): import('lit-html').TemplateResult<1>;
    protected updated(changedProperties: PropertyValues<this>): void;
}
export {};
//# sourceMappingURL=wy-message.d.ts.map