import { WeavyContextType } from '../client/weavy';
import { WyContextProvider as ContextProvider } from '../utils/context-provider';
export { type WeavyContextType } from '../client/weavy';
export declare const weavyContextDefinition: {
    __context__: import('../client/weavy').WeavyContext | undefined;
};
export declare function createWeavyContextProvider(host: HTMLElement, initialValue?: WeavyContextType): ContextProvider<{
    __context__: import('../client/weavy').WeavyContext | undefined;
}, HTMLElement>;
/**
 * Register a context provider before any component is transformed.
 * We will populate it when the WeavyEnvironment is constructed unless a different host is selected,
 * which naturally takes care of transformation order.
 */
declare const globalContextProvider: ContextProvider<{
    __context__: import('../client/weavy').WeavyContext | undefined;
}, HTMLElement>;
export { globalContextProvider };
//# sourceMappingURL=weavy-context.d.ts.map